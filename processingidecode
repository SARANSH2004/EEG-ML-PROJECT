import processing.serial.*;  // Ensure that the Serial library is imported
import java.io.File;  // For file handling

PrintWriter output;  // For writing to CSV
String val;  // For reading incoming data

// FFT parameters
int bufferSize = 256;  // Size of the FFT buffer
float[] fftData = new float[bufferSize];  // Array to hold FFT data

Serial myPort;  // Declare Serial object globally to ensure it's accessible throughout

// Folder path where all files will be saved
String folderPath = "C:\\Users\\Akanksha kumari\\OneDrive\\Desktop\\EEG_Data";  // Specify your existing folder path here

void setup() {
    // Set up serial communication
    String[] ports = Serial.list();  // Get list of available serial ports
    if (ports.length == 0) {
        println("No serial ports available.");
        exit();  // Exit if no ports are available
    }

    String portName = ports[0];  // Select the first available port
    myPort = new Serial(this, portName, 115200);  // Initialize myPort globally

    // Ensure the folder exists (no need to create it, just check)
    File folder = new File(folderPath);
    if (!folder.exists()) {
        println("The folder does not exist: " + folderPath);
        exit();  // Exit if the folder doesn't exist
    } else {
        println("Folder exists: " + folderPath);
    }

    // Create a unique filename using timestamp and save the file in the specified folder
    String timeStamp = year() + "" + month() + "" + day() + "" + hour() + "" + minute() + "_" + second();
    String fileName = folderPath + "eeg_data_" + timeStamp + ".csv";  // File name with timestamp
    
    println("Saving file to: " + fileName);  // Debugging output to check the file path

    // Try opening the CSV file for writing
    try {
        output = createWriter(fileName);  // Use the full file path to create the writer
        output.println("Timestamp,EEG Signal,Frequency,Amplitude");
        println("File created: " + fileName);
    } catch (Exception e) {
        println("Error creating file: " + e.getMessage());
        exit();
    }
}

void draw() {
    // Check if there is data available from the serial port
    if (myPort.available() > 0) {
        val = myPort.readStringUntil('\n');  
        if (val != null) {
            val = trim(val);  // Clean up the incoming data
            float eeg_signal = float(val);  // Convert the incoming string to float
            
            // Store the EEG signal for FFT processing
            // Shift the previous data and add the new signal
            for (int i = 0; i < fftData.length - 1; i++) {
                fftData[i] = fftData[i + 1];  // Shift data to left
            }
            fftData[fftData.length - 1] = eeg_signal;  // Add new signal at the end
            
            if (frameCount % 64 == 0) {  // Perform FFT every 64 frames (adjust as needed)
                float[] fftResult = fft(fftData);  // Get FFT results
                for (int i = 0; i < fftResult.length; i++) {
                    output.println(millis() / 1000.0 + "," + eeg_signal + "," + (i * (1.0 / bufferSize) * 256) + "," + fftResult[i]);
                }
                println("Logged data to CSV");
            }
        }
    }
}

float[] fft(float[] x) {
    int n = x.length;
    float[] spectrum = new float[n/2];  // Store the amplitude spectrum

    // FFT implementation
    for (int k = 0; k < n / 2; k++) {
        float real = 0;
        float imag = 0;
        for (int j = 0; j < n; j++) {
            float angle = (float) (2 * Math.PI * j * k / n);
            real += x[j] * Math.cos(angle);
            imag -= x[j] * Math.sin(angle);
        }
        spectrum[k] = sqrt(real * real + imag * imag);  // Amplitude calculation
    }
    return spectrum;  // Return amplitude spectrum
}

void keyPressed() {
    output.flush();  // Ensure data is written to the file
    output.close();  // Close the CSV file
    println("CSV file closed.");
    exit();  // Exit the program
}